{"success":true,"data":{"id":1}}
//
// NOTE:  SINCE THIS EXAMPLE RETURNS HARD-CODED RESPONSES, WE CANNOT KNOW WHICH RECORD WAS UPDATED SO "id":1
// IS HARD-CODED.
//

/**
 * Psuedo server-side "save" handler in PHP.
 * The key to fullfilling a successfull "save" request is to return a response having the properties
 * "successProperty" and "root" as defined in your JsonReader config.  The returned data MUST be of the same
 * form as the data received.  That is, if the server receives just 1 record to "save", the server should return 1
 * record.  If it recieves an Array of records to "save", the server should return an Array of records in the
 * same order received.
 *
 * Each record returned MUST contain at least the primary-key applied to the config-parameter "idProperty"
 * as defined in your JsonReader configuration.  You may send any other record-properties along and they
 * will be applied to the record on the client.  For example, one may wish to send an "updated_at" property
 * for updated records.
 *
<?php
    $action = $_REQUEST["xaction"]
    $data = $_REQUEST["data"]

    $response = array(
        "success" => false,
        "data" => null
    );

    // Are we updating many records or just one?
    if (is_array($data) {
        $response["data"] = array();
        foreach ($data as $rec) {
            array_push($response["data"], update($rec));   // <-- return data as Array
        }
    }
    else {
        $response["data"] = update($rec);  // <-- return just a single record if updating just 1 record.
    }
    $response["success"] = true;
    return json_encode($response);

    /**
    * Sample update function where you'd use an ORM of your choice.
    *
    function update($rec) {
        return User->update($rec);
    }
?>
 *
 *
 */