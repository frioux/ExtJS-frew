/*
 * Ext - JS Library 1.0 Alpha 2
 * Copyright(c) 2006-2007, Jack Slocum.
 */

Ext.onReady(function() {
	Ext.get("create-grid").on("click", createGrid);
});

Ext.override(Ext.Element, {
    boxWrap : function(cls){
        var el = Ext.get(this.insertHtml('beforeBegin', String.format('<div class="{0}"><div class="{0}-tl"><div class="{0}-tr"><div class="{0}-tc"></div></div></div><div class="{0}-ml"><div class="{0}-mr"><div class="{0}-mc"></div></div></div><div class="{0}-bl"><div class="{0}-br"><div class="{0}-bc"></div></div></div></div>', cls)));
        el.child('.'+cls+'-mc').dom.appendChild(this.dom);
        return el;
    }
});

// Create the grid (remove the handler - don't allow it to happen again!)
function createGrid() {
	var b = Ext.get("create-grid");
	b.dom.disabled = true;
	b.un("click", createGrid);
	new Ext.grid.TableGrid("the-table", {resizable:true}).render();
}

/** 
 * @class Ext.grid.TableProxy
 * A Proxy for the Ext.data.Store class which pulls data from a pre-existing HTML table element
 * @constructor
 * @param {String/HTMLElement/Ext.Element} table The table element from which this grid's data will be drawn.
 */
Ext.data.TableProxy = function(table) {
	this.table = table;
    Ext.data.TableProxy.superclass.constructor.call(this);
};

Ext.extend(Ext.data.TableProxy, Ext.data.DataProxy, {

    load : function(params, reader, callback, scope, arg){
        if(this.fireEvent("beforeload", this, params) !== false){
			this.loadResponse(this.table, reader, callback, scope, arg);
        }else{
            callback.call(scope||this, null, arg, false);
        }
    },
    
    loadResponse : function(table, reader, callback, scope, arg){
        var result;
        try {
            result = reader.read(table);
        }catch(e) {
            this.fireEvent("loadexception", this, null, response, e);
            callback.call(scope, null, arg, false);
            return;
        }
        callback.call(scope, result, arg, true);
    },
    
    update : function(dataSet){
    },
    
    updateResponse : function(dataSet){
    }
});

/** 
 * @class Ext.data.TableReader
 * A reader which creates Ext.data.Records from a passed HTML table element
 * @constructor
 * @param {Object} meta Metadata about the record.
 * @param {Function} recordType A constructor for an Ext.data.Record object generated by Ext.data.Record.create
 */
Ext.data.TableReader = function(meta, recordType){
    Ext.data.TableReader.superclass.constructor.call(this, meta, recordType);
};
Ext.extend(Ext.data.TableReader, Ext.data.DataReader, {
    read : function(table){
        var sid = this.meta ? this.meta.id : undefined;
    	var recordType = this.recordType, fields = recordType.prototype.fields;
    	var records = [];
    	var rows = table.select("tbody tr", true).elements;
	    for(var i = 0; i < rows.length; i++){
		    var cells = rows[i].select("td", true).elements;
	        var values = {};
	        var id = i;
	        for(var j = 0, jlen = fields.length; j < jlen; j++){
                var f = fields.items[j];
                var k = f.mapping || j;
                var v = cells[k].dom.innerHTML;
                v = f.convert(v);
                values[f.name] = v;
            }
	        var record = new recordType(values, id);
	        records[records.length] = record;
	    }
	    return {
	        records : records,
	        totalRecords : rows.length
	    };
    }
});

/**
 * @class Ext.grid.TableGrid
 * @extends Ext.grid.Grid
 * A Grid which creates itself from an existing HTML table element.
 * @constructor
 * @param {String/HTMLElement/Ext.Element} table The table element from which this grid will be created - 
 * The table MUST have some type of size defined for the grid to fill. The container will be 
 * automatically set to position relative if it isn't already.
 * @param {Object} config A config object that sets properties on this grid OR the data model to bind to
 * 
 *	
 */
Ext.grid.TableGrid = function(table, config) {
	this.table = Ext.get(table);
	var caption = this.table.dom.caption;
	var height = this.table.child("thead").getHeight() + this.table.child("tbody").getHeight() + 10;
	this.gridWrap = Ext.DomHelper.insertBefore(this.table.dom, {tag:"div"}, true).boxWrap("x-box");
	this.container = this.gridWrap.child(".x-box-mc");
	this.horizPadding = this.gridWrap.child(".x-box-ml").getPadding("lr") +
		this.container.getPadding("lr") +
		this.gridWrap.child(".x-box-mr").getPadding("lr");
	this.vertPadding = this.gridWrap.child(".x-box-tc").getHeight() +
		this.gridWrap.child(".x-box-bc").getHeight();
	this.container.dom.innerHTML = "";
	
	var cols = [];
	var recordEls = [];
	var gridWidth = 0;
	var headers = this.table.select("thead tr th", true).elements;
	for (var i = 0; i < headers.length; i++)
	{
		gridWidth += headers[i].dom.offsetWidth;
		var header = headers[i].dom.innerHTML;
		var name = header.replace(/\s/, "");

//		Create a field definition corresponding to this table column
   		recordEls.push({
   			'name': name
   		});

//		Create a grid column definition for this table columm.
//		The 'dataIndex' property maps to the 'name' property of the field definition
		cols.push({
			'header': header,
			'dataIndex': name,
			'width': headers[i].getWidth(),
			'tooltip': headers[i].dom.title
		});
	}

//	Size the wrapper and the grid. Hide the original table.
	this.gridWrap.setWidth(gridWidth + this.horizPadding);
	this.container.setHeight(height + 6);
	this.table.setVisibilityMode(Ext.Element.DISPLAY).hide();

    var ds  = new Ext.data.Store({
        proxy: new Ext.data.TableProxy(this.table),
        reader: new Ext.data.TableReader({}, Ext.data.Record.create(recordEls)),
        recordType: this.recordType
    });
	var cm = new Ext.grid.ColumnModel(cols);

    Ext.grid.TableGrid.superclass.constructor.call(this, this.container, Ext.apply({
		'ds': ds,
		'cm': cm,
		'sm': new Ext.grid.RowSelectionModel(),
		trackMouseOver: true
	}, config));
	ds.load();

};

Ext.extend(Ext.grid.TableGrid, Ext.grid.Grid, {
	render: function()
	{
	    Ext.grid.TableGrid.superclass.render.call(this);

//		make the grid resizable.
		if (this.resizable) {
		    var rz = new Ext.Resizable(this.gridWrap, {
		        wrap:true,
		        minHeight:100,
		        pinned:true,
		        handles: 'se'
		    });
		    rz.on('resize', this.autoSize, this);
		}
	},

	autoSize: function() {
		this.container.setHeight(this.gridWrap.getHeight() - this.vertPadding);
	    Ext.grid.TableGrid.superclass.autoSize.call(this);
	}
});